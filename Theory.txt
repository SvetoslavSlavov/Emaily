Node -> Javascript runtime used to execute
code outside of the browser
Express -> Library that runs in Node runtime.
Has helpers to make dealing with HTTP trafic
easier. (Everything in this library can be done in node only.)

Server on machine on port -> port door looking for trafic
Node and Express on port 5000

Express -> Route Handlers of to responde to incoming requests

Create index.js -> root file of our project

Using common js module (const express = require('express');)
because nodejs runtime only understands them.

System implemented in node js for requiring a shared code
between different files. Common js modules.
We will use it on node side of things.

Module System ES2015 modules node js does not have support for
for it. (import express from 'express';).
We will use it on React side of things.

const app = express(); -> set up configuration that are going
to listen for incomming request that are routed between node and express.
All route handlers will be registered with app object.

Express server

app.get('/', (req, res) => {
    res.send({ hi: 'there' });
});

app -> Express App to register this route handler with
get -> watch for incoming request with this method
'/' -> watch for requests trying to access '/'.(localhost:5000/)
req -> Object representing the incoming request (request)
res -> Object representing the outgoing response (response)
res.send({ hi: 'there' }) -> immediately send some JSON 
back to who ever made this reqest

The request Wants to...
     get -> Get info
     post -> Send info
app, put -> Update all the properties of something
     delete -> Delete something
     patch -> Update one or two properties of something

app.listen(5000);
Instruct express to tell node that it wants to listen for incoming
trafic on port 5000

Heroku Deployment -> https://www.heroku.com/

1.Dynamic port binding -> Heroku tells us which port our app
will use, so we need to make sure we listen to the port they 
tell us to
index.js
-> const PORT = process.env.PORT || 5000;
-> app.listen(PORT);
2.Specify Node Enviroment -> We want to use a specific version
of node, so we need to tell Heroku which version we want
package.json
"engines": {
    "node": "8.4.0",
    "npm": "5.5.1"
  },
3.Specific start script -> Instruct Heroku what command to run
to start our server running
"scripts": {
    "start": "node index.js"
  },
4.Create .gitignore file -> We don't want to incude dependencies,
Heroku will do that for us.

First time Deploy
1.Create Heroku account
2.Commit our codebase to git
3.Install Heroku CLI and Create App
4.Deploy App with Git
5.Heroku deploys project

Subsequent Deploy
1.Commit codebase with git
2.Deploy App with Git

Heroku CLI
Search in google
(Heroku Command Line Interface)

Heroku Links after creating the app
First link when we want to see the project
in the browser.
Second link deployment targer. Git repository
that we can push out local server to.

----------Google OAuth-----------
Google OAuth -> server side feauture
Sign in with Google 
Google OAuth Flow

Client
User click
'Login'

Direct to localhost:5000/auth/google

Server
Forward user's
request to Google

google.com/auth?appid=123

Google
Ask user if they grant
permission
User grant permission

direct to localhost:5000/auth/google/callback?code=456

Server
Put user on hold, take
the 'code' from the URL
Send request to google 
with 'code' included

Google
Google sees 'code' in URL,
replies with details about
the user

Server
Get user details,
create new record in database
Set user ID in cookie 
for this user

Kick user back to localhost:3000

Client
Logged in!
I need some resource from the API
Cookie automatically included

Server
Ah, this request has a 
cookie with user id
equal to 123.

PasspordJS
(OAuth Flow) automate some parts
of the oauth set up.
Installing two different librayies.
Passport Library Component
passport - General helpers for handling
auth in Express apps
passport strategy - Helpers for authenticating
with one very specific method (email/password, Google, Facebook, etc)

When you go to PasspordJS search and search for
google the result documentation say you should use
passport-google-oauth1 or passport-google-oauth20
20(2.0)

passport.use(new GoogleStrategy());

new GoogleStrategy create a new instance of GoogleStrategy
Hey i want to authenticate my users with google

passport.use -> generic register, i want you to now that there is 
a new strategy available make use of it

Enable GoogleAuth API

client id and client secret from google
Sign Up with google API

https://console.developers.google.com/

On Projects -> + sign -> create new one -> emaily-dev
Click on the project -> select the new one
Enable API -> Search -> Google+ API -> Click -> Enable
Create credentials
Credentials -> OAuth client id -> Configure coscent screen
Product name shown to users -> emaily-dev
Web application -> Authorized JavaScript origins -> http://localhost:5000
                -> Authorized redirect URIs -> http://localhost:5000/*
Pop up -> client id and client secret
                